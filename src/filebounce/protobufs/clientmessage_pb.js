/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.protobufs.AuthSuccessData', null, global);
goog.exportSymbol('proto.protobufs.AuthenticateData', null, global);
goog.exportSymbol('proto.protobufs.ClientToTransferNodeMessage', null, global);
goog.exportSymbol('proto.protobufs.ClientToTransferNodeMessage.MessageType', null, global);
goog.exportSymbol('proto.protobufs.ErrorData', null, global);
goog.exportSymbol('proto.protobufs.FinishedData', null, global);
goog.exportSymbol('proto.protobufs.ProgressData', null, global);
goog.exportSymbol('proto.protobufs.RecipientsData', null, global);
goog.exportSymbol('proto.protobufs.RecipientsData.Recipient', null, global);
goog.exportSymbol('proto.protobufs.StartUploadData', null, global);
goog.exportSymbol('proto.protobufs.TransferCreatedData', null, global);
goog.exportSymbol('proto.protobufs.TransferNodeToClientMessage', null, global);
goog.exportSymbol('proto.protobufs.TransferNodeToClientMessage.MessageType', null, global);
goog.exportSymbol('proto.protobufs.UploadData', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobufs.ClientToTransferNodeMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobufs.ClientToTransferNodeMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobufs.ClientToTransferNodeMessage.displayName = 'proto.protobufs.ClientToTransferNodeMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobufs.ClientToTransferNodeMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.protobufs.ClientToTransferNodeMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobufs.ClientToTransferNodeMessage} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protobufs.ClientToTransferNodeMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    authdata: (f = msg.getAuthdata()) && proto.protobufs.AuthenticateData.toObject(includeInstance, f),
    startdata: (f = msg.getStartdata()) && proto.protobufs.StartUploadData.toObject(includeInstance, f),
    uploaddata: (f = msg.getUploaddata()) && proto.protobufs.UploadData.toObject(includeInstance, f),
    finisheddata: (f = msg.getFinisheddata()) && proto.protobufs.FinishedData.toObject(includeInstance, f),
    timestamp: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobufs.ClientToTransferNodeMessage}
 */
proto.protobufs.ClientToTransferNodeMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobufs.ClientToTransferNodeMessage;
  return proto.protobufs.ClientToTransferNodeMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobufs.ClientToTransferNodeMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobufs.ClientToTransferNodeMessage}
 */
proto.protobufs.ClientToTransferNodeMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.protobufs.ClientToTransferNodeMessage.MessageType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.protobufs.AuthenticateData;
      reader.readMessage(value,proto.protobufs.AuthenticateData.deserializeBinaryFromReader);
      msg.setAuthdata(value);
      break;
    case 3:
      var value = new proto.protobufs.StartUploadData;
      reader.readMessage(value,proto.protobufs.StartUploadData.deserializeBinaryFromReader);
      msg.setStartdata(value);
      break;
    case 4:
      var value = new proto.protobufs.UploadData;
      reader.readMessage(value,proto.protobufs.UploadData.deserializeBinaryFromReader);
      msg.setUploaddata(value);
      break;
    case 5:
      var value = new proto.protobufs.FinishedData;
      reader.readMessage(value,proto.protobufs.FinishedData.deserializeBinaryFromReader);
      msg.setFinisheddata(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protobufs.ClientToTransferNodeMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protobufs.ClientToTransferNodeMessage.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobufs.ClientToTransferNodeMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protobufs.ClientToTransferNodeMessage.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getAuthdata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protobufs.AuthenticateData.serializeBinaryToWriter
    );
  }
  f = this.getStartdata();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protobufs.StartUploadData.serializeBinaryToWriter
    );
  }
  f = this.getUploaddata();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.protobufs.UploadData.serializeBinaryToWriter
    );
  }
  f = this.getFinisheddata();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.protobufs.FinishedData.serializeBinaryToWriter
    );
  }
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * optional MessageType type = 1;
 * @return {!proto.protobufs.ClientToTransferNodeMessage.MessageType}
 */
proto.protobufs.ClientToTransferNodeMessage.prototype.getType = function() {
  return /** @type {!proto.protobufs.ClientToTransferNodeMessage.MessageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.protobufs.ClientToTransferNodeMessage.MessageType} value */
proto.protobufs.ClientToTransferNodeMessage.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional AuthenticateData authData = 2;
 * @return {?proto.protobufs.AuthenticateData}
 */
proto.protobufs.ClientToTransferNodeMessage.prototype.getAuthdata = function() {
  return /** @type{?proto.protobufs.AuthenticateData} */ (
    jspb.Message.getWrapperField(this, proto.protobufs.AuthenticateData, 2));
};


/** @param {?proto.protobufs.AuthenticateData|undefined} value */
proto.protobufs.ClientToTransferNodeMessage.prototype.setAuthdata = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.protobufs.ClientToTransferNodeMessage.prototype.clearAuthdata = function() {
  this.setAuthdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobufs.ClientToTransferNodeMessage.prototype.hasAuthdata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional StartUploadData startData = 3;
 * @return {?proto.protobufs.StartUploadData}
 */
proto.protobufs.ClientToTransferNodeMessage.prototype.getStartdata = function() {
  return /** @type{?proto.protobufs.StartUploadData} */ (
    jspb.Message.getWrapperField(this, proto.protobufs.StartUploadData, 3));
};


/** @param {?proto.protobufs.StartUploadData|undefined} value */
proto.protobufs.ClientToTransferNodeMessage.prototype.setStartdata = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.protobufs.ClientToTransferNodeMessage.prototype.clearStartdata = function() {
  this.setStartdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobufs.ClientToTransferNodeMessage.prototype.hasStartdata = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional UploadData uploadData = 4;
 * @return {?proto.protobufs.UploadData}
 */
proto.protobufs.ClientToTransferNodeMessage.prototype.getUploaddata = function() {
  return /** @type{?proto.protobufs.UploadData} */ (
    jspb.Message.getWrapperField(this, proto.protobufs.UploadData, 4));
};


/** @param {?proto.protobufs.UploadData|undefined} value */
proto.protobufs.ClientToTransferNodeMessage.prototype.setUploaddata = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.protobufs.ClientToTransferNodeMessage.prototype.clearUploaddata = function() {
  this.setUploaddata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobufs.ClientToTransferNodeMessage.prototype.hasUploaddata = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional FinishedData finishedData = 5;
 * @return {?proto.protobufs.FinishedData}
 */
proto.protobufs.ClientToTransferNodeMessage.prototype.getFinisheddata = function() {
  return /** @type{?proto.protobufs.FinishedData} */ (
    jspb.Message.getWrapperField(this, proto.protobufs.FinishedData, 5));
};


/** @param {?proto.protobufs.FinishedData|undefined} value */
proto.protobufs.ClientToTransferNodeMessage.prototype.setFinisheddata = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.protobufs.ClientToTransferNodeMessage.prototype.clearFinisheddata = function() {
  this.setFinisheddata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobufs.ClientToTransferNodeMessage.prototype.hasFinisheddata = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int64 timestamp = 6;
 * @return {number}
 */
proto.protobufs.ClientToTransferNodeMessage.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protobufs.ClientToTransferNodeMessage.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * @enum {number}
 */
proto.protobufs.ClientToTransferNodeMessage.MessageType = {
  AUTHENTICATE: 0,
  START_UPLOAD: 1,
  UPLOAD_DATA: 2,
  FINISHED: 3,
  ERROR: 4
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobufs.AuthenticateData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobufs.AuthenticateData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobufs.AuthenticateData.displayName = 'proto.protobufs.AuthenticateData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobufs.AuthenticateData.prototype.toObject = function(opt_includeInstance) {
  return proto.protobufs.AuthenticateData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobufs.AuthenticateData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protobufs.AuthenticateData.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobufs.AuthenticateData}
 */
proto.protobufs.AuthenticateData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobufs.AuthenticateData;
  return proto.protobufs.AuthenticateData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobufs.AuthenticateData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobufs.AuthenticateData}
 */
proto.protobufs.AuthenticateData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protobufs.AuthenticateData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protobufs.AuthenticateData.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobufs.AuthenticateData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protobufs.AuthenticateData.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.protobufs.AuthenticateData.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protobufs.AuthenticateData.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobufs.StartUploadData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobufs.StartUploadData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobufs.StartUploadData.displayName = 'proto.protobufs.StartUploadData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobufs.StartUploadData.prototype.toObject = function(opt_includeInstance) {
  return proto.protobufs.StartUploadData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobufs.StartUploadData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protobufs.StartUploadData.toObject = function(includeInstance, msg) {
  var f, obj = {
    filename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mimetype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    size: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobufs.StartUploadData}
 */
proto.protobufs.StartUploadData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobufs.StartUploadData;
  return proto.protobufs.StartUploadData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobufs.StartUploadData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobufs.StartUploadData}
 */
proto.protobufs.StartUploadData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMimetype(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protobufs.StartUploadData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protobufs.StartUploadData.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobufs.StartUploadData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protobufs.StartUploadData.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFilename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getMimetype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getSize();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string filename = 1;
 * @return {string}
 */
proto.protobufs.StartUploadData.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protobufs.StartUploadData.prototype.setFilename = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string mimetype = 2;
 * @return {string}
 */
proto.protobufs.StartUploadData.prototype.getMimetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protobufs.StartUploadData.prototype.setMimetype = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 size = 3;
 * @return {number}
 */
proto.protobufs.StartUploadData.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protobufs.StartUploadData.prototype.setSize = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobufs.UploadData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobufs.UploadData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobufs.UploadData.displayName = 'proto.protobufs.UploadData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobufs.UploadData.prototype.toObject = function(opt_includeInstance) {
  return proto.protobufs.UploadData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobufs.UploadData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protobufs.UploadData.toObject = function(includeInstance, msg) {
  var f, obj = {
    order: jspb.Message.getFieldWithDefault(msg, 1, 0),
    size: jspb.Message.getFieldWithDefault(msg, 2, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobufs.UploadData}
 */
proto.protobufs.UploadData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobufs.UploadData;
  return proto.protobufs.UploadData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobufs.UploadData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobufs.UploadData}
 */
proto.protobufs.UploadData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOrder(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protobufs.UploadData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protobufs.UploadData.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobufs.UploadData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protobufs.UploadData.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOrder();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = this.getSize();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = this.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional uint64 order = 1;
 * @return {number}
 */
proto.protobufs.UploadData.prototype.getOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protobufs.UploadData.prototype.setOrder = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 size = 2;
 * @return {number}
 */
proto.protobufs.UploadData.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protobufs.UploadData.prototype.setSize = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.protobufs.UploadData.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.protobufs.UploadData.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.protobufs.UploadData.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.protobufs.UploadData.prototype.setData = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobufs.FinishedData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobufs.FinishedData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobufs.FinishedData.displayName = 'proto.protobufs.FinishedData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobufs.FinishedData.prototype.toObject = function(opt_includeInstance) {
  return proto.protobufs.FinishedData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobufs.FinishedData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protobufs.FinishedData.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, ""),
    success: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobufs.FinishedData}
 */
proto.protobufs.FinishedData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobufs.FinishedData;
  return proto.protobufs.FinishedData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobufs.FinishedData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobufs.FinishedData}
 */
proto.protobufs.FinishedData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protobufs.FinishedData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protobufs.FinishedData.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobufs.FinishedData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protobufs.FinishedData.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getError();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string error = 1;
 * @return {string}
 */
proto.protobufs.FinishedData.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protobufs.FinishedData.prototype.setError = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool success = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protobufs.FinishedData.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.protobufs.FinishedData.prototype.setSuccess = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobufs.TransferNodeToClientMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobufs.TransferNodeToClientMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobufs.TransferNodeToClientMessage.displayName = 'proto.protobufs.TransferNodeToClientMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobufs.TransferNodeToClientMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.protobufs.TransferNodeToClientMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobufs.TransferNodeToClientMessage} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protobufs.TransferNodeToClientMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    authsuccessdata: (f = msg.getAuthsuccessdata()) && proto.protobufs.AuthSuccessData.toObject(includeInstance, f),
    transfercreateddata: (f = msg.getTransfercreateddata()) && proto.protobufs.TransferCreatedData.toObject(includeInstance, f),
    recipientsdata: (f = msg.getRecipientsdata()) && proto.protobufs.RecipientsData.toObject(includeInstance, f),
    progressdata: (f = msg.getProgressdata()) && proto.protobufs.ProgressData.toObject(includeInstance, f),
    finisheddata: (f = msg.getFinisheddata()) && proto.protobufs.FinishedData.toObject(includeInstance, f),
    errordata: (f = msg.getErrordata()) && proto.protobufs.ErrorData.toObject(includeInstance, f),
    timestamp: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobufs.TransferNodeToClientMessage}
 */
proto.protobufs.TransferNodeToClientMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobufs.TransferNodeToClientMessage;
  return proto.protobufs.TransferNodeToClientMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobufs.TransferNodeToClientMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobufs.TransferNodeToClientMessage}
 */
proto.protobufs.TransferNodeToClientMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.protobufs.TransferNodeToClientMessage.MessageType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.protobufs.AuthSuccessData;
      reader.readMessage(value,proto.protobufs.AuthSuccessData.deserializeBinaryFromReader);
      msg.setAuthsuccessdata(value);
      break;
    case 3:
      var value = new proto.protobufs.TransferCreatedData;
      reader.readMessage(value,proto.protobufs.TransferCreatedData.deserializeBinaryFromReader);
      msg.setTransfercreateddata(value);
      break;
    case 4:
      var value = new proto.protobufs.RecipientsData;
      reader.readMessage(value,proto.protobufs.RecipientsData.deserializeBinaryFromReader);
      msg.setRecipientsdata(value);
      break;
    case 5:
      var value = new proto.protobufs.ProgressData;
      reader.readMessage(value,proto.protobufs.ProgressData.deserializeBinaryFromReader);
      msg.setProgressdata(value);
      break;
    case 6:
      var value = new proto.protobufs.FinishedData;
      reader.readMessage(value,proto.protobufs.FinishedData.deserializeBinaryFromReader);
      msg.setFinisheddata(value);
      break;
    case 7:
      var value = new proto.protobufs.ErrorData;
      reader.readMessage(value,proto.protobufs.ErrorData.deserializeBinaryFromReader);
      msg.setErrordata(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protobufs.TransferNodeToClientMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protobufs.TransferNodeToClientMessage.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobufs.TransferNodeToClientMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protobufs.TransferNodeToClientMessage.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getAuthsuccessdata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protobufs.AuthSuccessData.serializeBinaryToWriter
    );
  }
  f = this.getTransfercreateddata();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protobufs.TransferCreatedData.serializeBinaryToWriter
    );
  }
  f = this.getRecipientsdata();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.protobufs.RecipientsData.serializeBinaryToWriter
    );
  }
  f = this.getProgressdata();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.protobufs.ProgressData.serializeBinaryToWriter
    );
  }
  f = this.getFinisheddata();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.protobufs.FinishedData.serializeBinaryToWriter
    );
  }
  f = this.getErrordata();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.protobufs.ErrorData.serializeBinaryToWriter
    );
  }
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
};


/**
 * optional MessageType type = 1;
 * @return {!proto.protobufs.TransferNodeToClientMessage.MessageType}
 */
proto.protobufs.TransferNodeToClientMessage.prototype.getType = function() {
  return /** @type {!proto.protobufs.TransferNodeToClientMessage.MessageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.protobufs.TransferNodeToClientMessage.MessageType} value */
proto.protobufs.TransferNodeToClientMessage.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional AuthSuccessData authSuccessData = 2;
 * @return {?proto.protobufs.AuthSuccessData}
 */
proto.protobufs.TransferNodeToClientMessage.prototype.getAuthsuccessdata = function() {
  return /** @type{?proto.protobufs.AuthSuccessData} */ (
    jspb.Message.getWrapperField(this, proto.protobufs.AuthSuccessData, 2));
};


/** @param {?proto.protobufs.AuthSuccessData|undefined} value */
proto.protobufs.TransferNodeToClientMessage.prototype.setAuthsuccessdata = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.protobufs.TransferNodeToClientMessage.prototype.clearAuthsuccessdata = function() {
  this.setAuthsuccessdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobufs.TransferNodeToClientMessage.prototype.hasAuthsuccessdata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TransferCreatedData transferCreatedData = 3;
 * @return {?proto.protobufs.TransferCreatedData}
 */
proto.protobufs.TransferNodeToClientMessage.prototype.getTransfercreateddata = function() {
  return /** @type{?proto.protobufs.TransferCreatedData} */ (
    jspb.Message.getWrapperField(this, proto.protobufs.TransferCreatedData, 3));
};


/** @param {?proto.protobufs.TransferCreatedData|undefined} value */
proto.protobufs.TransferNodeToClientMessage.prototype.setTransfercreateddata = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.protobufs.TransferNodeToClientMessage.prototype.clearTransfercreateddata = function() {
  this.setTransfercreateddata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobufs.TransferNodeToClientMessage.prototype.hasTransfercreateddata = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RecipientsData recipientsData = 4;
 * @return {?proto.protobufs.RecipientsData}
 */
proto.protobufs.TransferNodeToClientMessage.prototype.getRecipientsdata = function() {
  return /** @type{?proto.protobufs.RecipientsData} */ (
    jspb.Message.getWrapperField(this, proto.protobufs.RecipientsData, 4));
};


/** @param {?proto.protobufs.RecipientsData|undefined} value */
proto.protobufs.TransferNodeToClientMessage.prototype.setRecipientsdata = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.protobufs.TransferNodeToClientMessage.prototype.clearRecipientsdata = function() {
  this.setRecipientsdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobufs.TransferNodeToClientMessage.prototype.hasRecipientsdata = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ProgressData progressData = 5;
 * @return {?proto.protobufs.ProgressData}
 */
proto.protobufs.TransferNodeToClientMessage.prototype.getProgressdata = function() {
  return /** @type{?proto.protobufs.ProgressData} */ (
    jspb.Message.getWrapperField(this, proto.protobufs.ProgressData, 5));
};


/** @param {?proto.protobufs.ProgressData|undefined} value */
proto.protobufs.TransferNodeToClientMessage.prototype.setProgressdata = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.protobufs.TransferNodeToClientMessage.prototype.clearProgressdata = function() {
  this.setProgressdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobufs.TransferNodeToClientMessage.prototype.hasProgressdata = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional FinishedData finishedData = 6;
 * @return {?proto.protobufs.FinishedData}
 */
proto.protobufs.TransferNodeToClientMessage.prototype.getFinisheddata = function() {
  return /** @type{?proto.protobufs.FinishedData} */ (
    jspb.Message.getWrapperField(this, proto.protobufs.FinishedData, 6));
};


/** @param {?proto.protobufs.FinishedData|undefined} value */
proto.protobufs.TransferNodeToClientMessage.prototype.setFinisheddata = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.protobufs.TransferNodeToClientMessage.prototype.clearFinisheddata = function() {
  this.setFinisheddata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobufs.TransferNodeToClientMessage.prototype.hasFinisheddata = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ErrorData errorData = 7;
 * @return {?proto.protobufs.ErrorData}
 */
proto.protobufs.TransferNodeToClientMessage.prototype.getErrordata = function() {
  return /** @type{?proto.protobufs.ErrorData} */ (
    jspb.Message.getWrapperField(this, proto.protobufs.ErrorData, 7));
};


/** @param {?proto.protobufs.ErrorData|undefined} value */
proto.protobufs.TransferNodeToClientMessage.prototype.setErrordata = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.protobufs.TransferNodeToClientMessage.prototype.clearErrordata = function() {
  this.setErrordata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobufs.TransferNodeToClientMessage.prototype.hasErrordata = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int64 timestamp = 8;
 * @return {number}
 */
proto.protobufs.TransferNodeToClientMessage.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.protobufs.TransferNodeToClientMessage.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * @enum {number}
 */
proto.protobufs.TransferNodeToClientMessage.MessageType = {
  AUTH_SUCCESS: 0,
  TRANSFER_CREATED: 1,
  RECIPIENTS: 3,
  PROGRESS: 4,
  FINISHED: 5,
  ERROR: 6
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobufs.AuthSuccessData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobufs.AuthSuccessData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobufs.AuthSuccessData.displayName = 'proto.protobufs.AuthSuccessData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobufs.AuthSuccessData.prototype.toObject = function(opt_includeInstance) {
  return proto.protobufs.AuthSuccessData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobufs.AuthSuccessData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protobufs.AuthSuccessData.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobufs.AuthSuccessData}
 */
proto.protobufs.AuthSuccessData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobufs.AuthSuccessData;
  return proto.protobufs.AuthSuccessData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobufs.AuthSuccessData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobufs.AuthSuccessData}
 */
proto.protobufs.AuthSuccessData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protobufs.AuthSuccessData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protobufs.AuthSuccessData.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobufs.AuthSuccessData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protobufs.AuthSuccessData.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobufs.TransferCreatedData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobufs.TransferCreatedData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobufs.TransferCreatedData.displayName = 'proto.protobufs.TransferCreatedData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobufs.TransferCreatedData.prototype.toObject = function(opt_includeInstance) {
  return proto.protobufs.TransferCreatedData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobufs.TransferCreatedData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protobufs.TransferCreatedData.toObject = function(includeInstance, msg) {
  var f, obj = {
    transferid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    chunksize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    requestchunks: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobufs.TransferCreatedData}
 */
proto.protobufs.TransferCreatedData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobufs.TransferCreatedData;
  return proto.protobufs.TransferCreatedData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobufs.TransferCreatedData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobufs.TransferCreatedData}
 */
proto.protobufs.TransferCreatedData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransferid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setChunksize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestchunks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protobufs.TransferCreatedData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protobufs.TransferCreatedData.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobufs.TransferCreatedData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protobufs.TransferCreatedData.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTransferid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getChunksize();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = this.getRequestchunks();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string transferId = 1;
 * @return {string}
 */
proto.protobufs.TransferCreatedData.prototype.getTransferid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protobufs.TransferCreatedData.prototype.setTransferid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 chunkSize = 2;
 * @return {number}
 */
proto.protobufs.TransferCreatedData.prototype.getChunksize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protobufs.TransferCreatedData.prototype.setChunksize = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 requestChunks = 3;
 * @return {number}
 */
proto.protobufs.TransferCreatedData.prototype.getRequestchunks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protobufs.TransferCreatedData.prototype.setRequestchunks = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobufs.RecipientsData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protobufs.RecipientsData.repeatedFields_, null);
};
goog.inherits(proto.protobufs.RecipientsData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobufs.RecipientsData.displayName = 'proto.protobufs.RecipientsData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protobufs.RecipientsData.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobufs.RecipientsData.prototype.toObject = function(opt_includeInstance) {
  return proto.protobufs.RecipientsData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobufs.RecipientsData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protobufs.RecipientsData.toObject = function(includeInstance, msg) {
  var f, obj = {
    recipientsList: jspb.Message.toObjectList(msg.getRecipientsList(),
    proto.protobufs.RecipientsData.Recipient.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobufs.RecipientsData}
 */
proto.protobufs.RecipientsData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobufs.RecipientsData;
  return proto.protobufs.RecipientsData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobufs.RecipientsData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobufs.RecipientsData}
 */
proto.protobufs.RecipientsData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protobufs.RecipientsData.Recipient;
      reader.readMessage(value,proto.protobufs.RecipientsData.Recipient.deserializeBinaryFromReader);
      msg.addRecipients(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protobufs.RecipientsData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protobufs.RecipientsData.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobufs.RecipientsData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protobufs.RecipientsData.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRecipientsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.protobufs.RecipientsData.Recipient.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Recipient recipients = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protobufs.RecipientsData.Recipient>}
 */
proto.protobufs.RecipientsData.prototype.getRecipientsList = function() {
  return /** @type{!Array.<!proto.protobufs.RecipientsData.Recipient>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protobufs.RecipientsData.Recipient, 1));
};


/** @param {!Array.<!proto.protobufs.RecipientsData.Recipient>} value */
proto.protobufs.RecipientsData.prototype.setRecipientsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.protobufs.RecipientsData.Recipient=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protobufs.RecipientsData.Recipient}
 */
proto.protobufs.RecipientsData.prototype.addRecipients = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.protobufs.RecipientsData.Recipient, opt_index);
};


proto.protobufs.RecipientsData.prototype.clearRecipientsList = function() {
  this.setRecipientsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobufs.RecipientsData.Recipient = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobufs.RecipientsData.Recipient, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobufs.RecipientsData.Recipient.displayName = 'proto.protobufs.RecipientsData.Recipient';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobufs.RecipientsData.Recipient.prototype.toObject = function(opt_includeInstance) {
  return proto.protobufs.RecipientsData.Recipient.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobufs.RecipientsData.Recipient} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protobufs.RecipientsData.Recipient.toObject = function(includeInstance, msg) {
  var f, obj = {
    ipv4: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ipv6: jspb.Message.getFieldWithDefault(msg, 2, ""),
    identity: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobufs.RecipientsData.Recipient}
 */
proto.protobufs.RecipientsData.Recipient.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobufs.RecipientsData.Recipient;
  return proto.protobufs.RecipientsData.Recipient.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobufs.RecipientsData.Recipient} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobufs.RecipientsData.Recipient}
 */
proto.protobufs.RecipientsData.Recipient.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpv4(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpv6(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protobufs.RecipientsData.Recipient} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protobufs.RecipientsData.Recipient.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobufs.RecipientsData.Recipient.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protobufs.RecipientsData.Recipient.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getIpv4();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getIpv6();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getIdentity();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string ipv4 = 1;
 * @return {string}
 */
proto.protobufs.RecipientsData.Recipient.prototype.getIpv4 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protobufs.RecipientsData.Recipient.prototype.setIpv4 = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string ipv6 = 2;
 * @return {string}
 */
proto.protobufs.RecipientsData.Recipient.prototype.getIpv6 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protobufs.RecipientsData.Recipient.prototype.setIpv6 = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string identity = 3;
 * @return {string}
 */
proto.protobufs.RecipientsData.Recipient.prototype.getIdentity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protobufs.RecipientsData.Recipient.prototype.setIdentity = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobufs.ProgressData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobufs.ProgressData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobufs.ProgressData.displayName = 'proto.protobufs.ProgressData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobufs.ProgressData.prototype.toObject = function(opt_includeInstance) {
  return proto.protobufs.ProgressData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobufs.ProgressData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protobufs.ProgressData.toObject = function(includeInstance, msg) {
  var f, obj = {
    bytesuploaded: jspb.Message.getFieldWithDefault(msg, 1, 0),
    requestchunks: jspb.Message.getFieldWithDefault(msg, 2, 0),
    chunksize: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobufs.ProgressData}
 */
proto.protobufs.ProgressData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobufs.ProgressData;
  return proto.protobufs.ProgressData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobufs.ProgressData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobufs.ProgressData}
 */
proto.protobufs.ProgressData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBytesuploaded(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestchunks(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setChunksize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protobufs.ProgressData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protobufs.ProgressData.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobufs.ProgressData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protobufs.ProgressData.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBytesuploaded();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getRequestchunks();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = this.getChunksize();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional int64 bytesUploaded = 1;
 * @return {number}
 */
proto.protobufs.ProgressData.prototype.getBytesuploaded = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protobufs.ProgressData.prototype.setBytesuploaded = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 requestChunks = 2;
 * @return {number}
 */
proto.protobufs.ProgressData.prototype.getRequestchunks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protobufs.ProgressData.prototype.setRequestchunks = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 chunkSize = 3;
 * @return {number}
 */
proto.protobufs.ProgressData.prototype.getChunksize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protobufs.ProgressData.prototype.setChunksize = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobufs.ErrorData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobufs.ErrorData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobufs.ErrorData.displayName = 'proto.protobufs.ErrorData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobufs.ErrorData.prototype.toObject = function(opt_includeInstance) {
  return proto.protobufs.ErrorData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobufs.ErrorData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protobufs.ErrorData.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    jsondetails: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fatal: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobufs.ErrorData}
 */
proto.protobufs.ErrorData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobufs.ErrorData;
  return proto.protobufs.ErrorData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobufs.ErrorData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobufs.ErrorData}
 */
proto.protobufs.ErrorData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsondetails(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFatal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protobufs.ErrorData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protobufs.ErrorData.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobufs.ErrorData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protobufs.ErrorData.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getJsondetails();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getFatal();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.protobufs.ErrorData.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protobufs.ErrorData.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string jsonDetails = 2;
 * @return {string}
 */
proto.protobufs.ErrorData.prototype.getJsondetails = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protobufs.ErrorData.prototype.setJsondetails = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool fatal = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protobufs.ErrorData.prototype.getFatal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.protobufs.ErrorData.prototype.setFatal = function(value) {
  jspb.Message.setField(this, 3, value);
};


goog.object.extend(exports, proto.protobufs);
